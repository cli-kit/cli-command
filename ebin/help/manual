#!/usr/bin/env node

//process.env.CLI_TOOLKIT_DEBUG=true;
var fs = require('fs');
var path = require('path');
var pkg = path.normalize(
  path.join(__dirname, '..', '..', 'package.json'));
var file = path.join(__dirname, path.basename(process.argv[1]) + '.md')
var cli = require('../..'), help = cli.help;
var formats = cli.doc.fmt.formats;
var styles = cli.doc.fmt.styles;
function write(keepalive, callback) {
  var scope = this;
  if(!this.output) {
    help.call(this, keepalive);
    callback();
  }else{
    var stream = fs.createWriteStream(this.output, {flags: 'w'});
    stream.on('error', function(e) {
      scope.raise(e);
    })
    stream.on('open', function() {
      help.call(scope, keepalive, stream);
      callback();
    })
  }
}
var options = {
  commands: {
    format: function(info, req, next) {
      //console.dir(req);
      write.call(this, true, function() {
        console.info('formats: %s', formats.join(', '));
        console.info('styles: %s', styles.join(', '));
      });
      // halt middleware processing and do not fire
      // the complete event
      next(null);
    }
  },
  options: {
    output: cli.types.path
  }
}
cli(pkg)
  .configure(
    {
      load: {file: file, options: options},
      substitute: {enabled: true},
      help: {style: 'markdown'},
      manual: {}
    }
  )
  .use(require('cli-mid-color'))
  .use(require('cli-mid-manual'))
  .once('format', function(req, arg, value) {
    this.configure().help.style = value;
  })
  .on('complete', function(req) {
    write.call(this);
  })
  .on('load', function(req) {
    this.version()
      .help();
  })
  .parse();
